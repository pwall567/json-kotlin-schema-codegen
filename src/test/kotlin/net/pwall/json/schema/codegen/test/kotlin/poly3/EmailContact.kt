/*
 * EmailContact.kt
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package net.pwall.json.schema.codegen.test.kotlin.poly3

import io.jstuff.json.validation.JSONValidation

import net.pwall.json.schema.codegen.test.kotlin.TestPolymorphicGroup3

class EmailContact(
    override val base: String,
    contactType: String,
    val emailAddress: String
) : ContactBase(contactType), TestPolymorphicGroup3 {

    init {
        require(base.isNotEmpty()) { "base length < minimum 1 - ${base.length}" }
        require(contactType == cg_str0) { "contactType not constant value $cg_str0 - $contactType" }
        require(JSONValidation.isEmail(emailAddress)) { "emailAddress does not match format email - $emailAddress" }
    }

    override fun equals(other: Any?): Boolean = this === other || other is EmailContact &&
            super.equals(other) &&
            emailAddress == other.emailAddress

    override fun hashCode(): Int = super.hashCode() xor
            emailAddress.hashCode()

    override fun toString() = "EmailContact(base=$base, contactType=$contactType, emailAddress=$emailAddress)"

    fun copy(
        base: String = this.base,
        contactType: String = this.contactType,
        emailAddress: String = this.emailAddress
    ) = EmailContact(base, contactType, emailAddress)

    operator fun component3() = emailAddress

    companion object {
        private const val cg_str0 = "EMAIL"
    }

}
