/*
 * TypeC.java
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package net.pwall.json.schema.codegen.test.java.oneof;

public class TypeC implements TypeA {

    private final long aaa;
    private final String yyy;

    public TypeC(
            long aaa,
            String yyy
    ) {
        this.aaa = aaa;
        if (yyy == null)
            throw new IllegalArgumentException("Must not be null - yyy");
        this.yyy = yyy;
    }

    @Override
    public long getAaa() {
        return aaa;
    }

    public String getYyy() {
        return yyy;
    }

    @Override
    public boolean equals(Object cg_other) {
        if (this == cg_other)
            return true;
        if (!(cg_other instanceof TypeC))
            return false;
        TypeC cg_typedOther = (TypeC)cg_other;
        if (aaa != cg_typedOther.aaa)
            return false;
        return yyy.equals(cg_typedOther.yyy);
    }

    @Override
    public int hashCode() {
        int hash = (int)aaa;
        return hash ^ yyy.hashCode();
    }

    public static class Builder {

        private long aaa;
        private String yyy;

        public Builder withAaa(long aaa) {
            this.aaa = aaa;
            return this;
        }

        public Builder withYyy(String yyy) {
            this.yyy = yyy;
            return this;
        }

        public TypeC build() {
            return new TypeC(
                    aaa,
                    yyy
            );
        }

    }

}
